{"version":3,"sources":["components/Header.js","general/colors.js","components/QuoteCard.js","components/Body.js","App.js","serviceWorker.js","index.js"],"names":["Header","Fragment","className","href","target","title","Component","getColor","colors","Math","floor","random","length","QuoteCard","state","quotes","quote","author","getRandomQuote","randomQuote","setState","quoteText","quoteAuthor","props","newBg","this","id","style","backgroundColor","background","onClick","rel","Body","myStyle","width","height","display","alignItems","justifyContent","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wSAeeA,EAZf,uKAEQ,OACI,kBAAC,IAAMC,SAAP,KACI,4BAAQC,UAAU,UAClB,kBAAC,IAAD,CAAcC,KAAK,wCAAwCC,OAAO,SAASC,MAAM,0BALjG,GAA4BC,a,OCHfC,EAAW,WAChB,IAAMC,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAC5D,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,WAE5C,OAAOA,EAAOC,KAAKC,MAAMD,KAAKE,SAAWH,EAAOI,U,OC8CzCC,EAvDf,4MAEIC,MAAQ,CACNC,OAAQA,EACRC,MAAO,GACPC,OAAQ,IALd,EASCC,eAAiB,WACd,IAAMP,EAASF,KAAKC,MAAMD,KAAKE,SAAW,EAAKG,MAAMC,OAAOH,QACtDO,EAAc,EAAKL,MAAMC,OAAOJ,GACtC,EAAKS,SAAL,2BACO,EAAKN,OADZ,IAEIE,MAAOG,EAAYE,UACnBJ,OAAQE,EAAYG,eAExB,EAAKC,MAAMC,SAjBf,kEAqBIC,KAAKP,mBArBT,+BAyBI,OACE,kBAAC,IAAMjB,SAAP,KACE,yBAAKyB,GAAG,aACN,yBAAKA,GAAG,QAAR,IAAiBD,KAAKX,MAAME,MAA5B,KACA,0BAAMU,GAAG,UACP,iCAAOD,KAAKX,MAAMG,OAAlB,OAEF,yBAAKS,GAAG,eACN,4BACEA,GAAG,YACHC,MAAO,CAAEC,gBAAiBH,KAAKF,MAAMM,YACrCC,QAASL,KAAKP,gBAHhB,aAOA,uBACEf,KAAK,mCACLC,OAAO,SACP2B,IAAI,sBACJL,GAAG,eAJL,gBAxCZ,GAA+BpB,aC+BhB0B,EA9Bf,4MACIlB,MAAQ,CACJmB,QAAS,CACLL,gBAAiBrB,IACjB2B,MAAO,QACPC,OAAQ,QACRC,QAAS,OACTC,WAAY,SACZC,eAAgB,WAR5B,EAYId,MAAQ,WACJ,EAAKJ,SAAU,CACXa,QAAQ,2BACD,EAAKnB,MAAMmB,SADX,IAEHL,gBAAiBrB,SAhBjC,uDAsBQ,OACI,yBAAKL,UAAU,YAAYyB,MAAQF,KAAKX,MAAMmB,SAC1C,kBAAC,EAAD,CAAWJ,WAAYJ,KAAKX,MAAMmB,QAAQL,gBAAiBJ,MAAOC,KAAKD,aAxBvF,GAA0BlB,aCWXiC,MAVf,WAEE,OACE,yBAAKrC,UAAU,OACf,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEgBsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.65d3ce71.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport GithubCorner from 'react-github-corner';\n\nexport class Header extends Component {\n    render() {\n        return (\n            <React.Fragment>\n                <header className=\"header\">\n                <GithubCorner href=\"https://github.com/zamanstrosity-cell\" target=\"_blank\" title=\"Visit Developer\" />\n                </header>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default Header\n","export const getColor = () => {\n        const colors = ['#FF6633', '#FFB399', '#FF33FF', '#FFFF99', '#00B3E6', \n        '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\n        '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A', \n        '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC',\n        '#66994D', '#B366CC', '#4D8000', '#B33300', '#CC80CC', \n        '#66664D', '#991AFF', '#E666FF', '#4DB3FF', '#1AB399',\n        '#E666B3', '#33991A', '#CC9999', '#B3B31A', '#00E680', \n        '#4D8066', '#809980', '#E6FF80', '#1AFF33', '#999933',\n        '#FF3380', '#CCCC00', '#66E64D', '#4D80CC', '#9900B3', \n        '#E64D66', '#4DB380', '#FF4D4D', '#99E6E6', '#6666FF'];\n\n        return colors[Math.floor(Math.random() * colors.length)]\n    }\n","import React, { Component } from \"react\";\nimport quotes from '../quotes.json';\n\nexport class QuoteCard extends Component {\n\n    state = {\n      quotes: quotes,\n      quote: \"\",\n      author: \"\",\n    };\n\n\n getRandomQuote = () => {\n    const random = Math.floor(Math.random() * this.state.quotes.length);\n    const randomQuote = this.state.quotes[random];\n    this.setState({\n        ...this.state,\n        quote: randomQuote.quoteText,\n        author: randomQuote.quoteAuthor\n    })\n    this.props.newBg()\n  }\n\n   componentDidMount() {\n    this.getRandomQuote();\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div id=\"quote-box\">\n          <div id=\"text\">\"{this.state.quote}\"</div>\n          <span id=\"author\">\n            <em> \"{this.state.author}\" </em>\n          </span>\n          <div id=\"card-bottom\">\n            <button\n              id=\"new-quote\"\n              style={{ backgroundColor: this.props.background }}\n              onClick={this.getRandomQuote}\n            >\n              New Quote\n            </button>\n            <a\n              href=\"https://twitter.com/intent/tweet\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              id=\"tweet-quote\"\n            >\n              Tweet\n            </a>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default QuoteCard;\n","import React, { Component } from 'react'\nimport { getColor } from '../general/colors'\nimport QuoteCard from './QuoteCard'\n\nexport class Body extends Component {\n    state = {\n        myStyle: {\n            backgroundColor: getColor(),\n            width: \"100vw\",\n            height: \"100vh\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\"\n        }\n    \n    }\n    newBg = () => {\n        this.setState( {\n            myStyle:  {\n                ...this.state.myStyle,\n                backgroundColor: getColor()\n            }\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"container\" style={ this.state.myStyle }>\n                <QuoteCard background={this.state.myStyle.backgroundColor} newBg={this.newBg}/>\n            </div>\n        )\n    }\n}\n\nexport default Body","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Body from './components/Body';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n    <Header />\n    <Body />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}